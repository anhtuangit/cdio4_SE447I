import React, { useState } from "react";
import { MapPin, Calculator, Calendar } from "lucide-react";

interface CardProps {
  icon: React.ReactNode;
  title: string;
  description?: string;
  children: React.ReactNode;
  imageUrl?: string;
}

const Card: React.FC<CardProps> = ({
  icon,
  title,
  description,
  children,
  imageUrl,
}) => {
  return (
    <div className="bg-white rounded-2xl overflow-hidden shadow-md hover:shadow-xl transition-shadow duration-300">
      {imageUrl && (
        <div className="h-44 w-full overflow-hidden">
          <img
            src={imageUrl}
            alt={title}
            className="w-full h-full object-cover transform hover:scale-105 transition-transform duration-500"
          />
        </div>
      )}
      <div className="p-6">
        <div className="flex items-center gap-3 mb-3">
          <div className="text-2xl text-blue-600">{icon}</div>
          <h3 className="text-xl font-semibold">{title}</h3>
        </div>
        {description && <p className="text-gray-600 mb-4">{description}</p>}
        <div>{children}</div>
      </div>
    </div>
  );
};

// üó∫Ô∏è CARD 1: B·∫¢N ƒê·ªí & V·ªä TR√ç
const MapUtility = () => (
  <Card
    icon={<MapPin className="w-7 h-7 text-blue-600" />}
    title="Kh√°m ph√° v·ªã tr√≠ ‚Äì Ti·ªán √≠ch & k·∫øt n·ªëi xung quanh"
    description="T√¨m hi·ªÉu v·ªã tr√≠ d·ª± √°n v√† c√°c ti·ªán √≠ch xung quanh gi√∫p b·∫°n ƒë√°nh gi√° m√¥i tr∆∞·ªùng s·ªëng thu·∫≠n ti·ªán v√† ti·ªÅm nƒÉng ƒë·∫ßu t∆∞."
    imageUrl="https://images.unsplash.com/photo-1494526585095-c41746248156?auto=format&fit=crop&w=900&q=80"
  >
    <iframe
      title="Google Maps"
      src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3918.688238889374!2d106.80207711428707!3d10.83084509228278!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x317528c780ee7f1f%3A0x5f7c7e38f91c9e07!2zQ8O0bmcgdmnDqm4gR2lhIHRo4bqtcCBIY2zhuqFuaCBUUC5IQ00!5e0!3m2!1svi!2s!4v1696068900000!5m2!1svi!2s"
      width="100%"
      height="260"
      style={{ border: 0 }}
      allowFullScreen
      loading="lazy"
      className="rounded-lg"
    />
    <div className="mt-4 text-gray-700 text-sm leading-relaxed">
      <ul className="list-disc list-inside space-y-1">
        <li>Xem b·∫£n ƒë·ªì tr·ª±c quan v·ªõi ch·∫ø ƒë·ªô v·ªá tinh ho·∫∑c ti√™u chu·∫©n.</li>
        <li>Hi·ªÉn th·ªã ti·ªán √≠ch l√¢n c·∫≠n: tr∆∞·ªùng h·ªçc, b·ªánh vi·ªán, ch·ª£, c√¥ng vi√™n.</li>
        <li>∆Ø·ªõc t√≠nh th·ªùi gian di chuy·ªÉn ƒë·∫øn c√°c ƒëi·ªÉm quan tr·ªçng ch·ªâ trong v√†i gi√¢y.</li>
      </ul>
      <p className="mt-3 italic text-gray-500">
        V√≠ d·ª•: D·ª± √°n A c√°ch si√™u th·ªã 600 m, b·ªánh vi·ªán 1.2 km v√† tr∆∞·ªùng h·ªçc 900 m ‚Äì thu·∫≠n ti·ªán cho cu·ªôc s·ªëng h√†ng ng√†y.
      </p>
    </div>
  </Card>
);

// üí∞ CARD 2: T√çNH KHO·∫¢N VAY
const LoanCalculator = () => {
  const [price, setPrice] = useState<number>(1000000);
  const [percent, setPercent] = useState<number>(30);
  const [years, setYears] = useState<number>(10);
  const [monthly, setMonthly] = useState<number | null>(null);
  const [isHovered, setIsHovered] = useState(false);

  // üßÆ H√†m ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn c√≥ d·∫•u ch·∫•m ngƒÉn c√°ch
  const formatCurrency = (num: number) => {
    return num.toLocaleString("vi-VN");
  };

  const parseCurrency = (value: string) => {
    return Number(value.replace(/[^\d]/g, "")) || 0;
  };

  const calculate = () => {
    if (percent <= 0 || years <= 0) {
      alert("T·ª∑ l·ªá vay v√† th·ªùi gian vay ph·∫£i l·ªõn h∆°n 0!");
      return;
    }

    const loan = (price * percent) / 100;
    const months = years * 12;
    const interestRate = 0.01;
    const monthlyPay =
      (loan * interestRate) / (1 - Math.pow(1 + interestRate, -months));
    setMonthly(Math.round(monthlyPay));
  };

  return (
    <Card
      icon={<Calculator className="w-7 h-7 text-purple-600" />}
      title="C√¥ng c·ª• t√≠nh vay ‚Äì L√™n k·∫ø cho·∫°ch t√†i ch√≠nh th√¥ng minh"
      description="T√≠nh to√°n nhanh l√£i su·∫•t, th·ªùi gian v√† kho·∫£n tr·∫£ g√≥p h√†ng th√°ng gi√∫p b·∫°n ch·ªß ƒë·ªông t√†i ch√≠nh khi ƒë·∫ßu t∆∞ b·∫•t ƒë·ªông s·∫£n."
      imageUrl="home.jpg"
    >
      <div className="space-y-4">
    {/* Gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n */}
<div>
  <label className="block text-sm font-medium text-gray-700 mb-1">
    Gi√° tr·ªã b·∫•t ƒë·ªông s·∫£n
  </label>
  <div className="relative">
    <input
      type="text"
      inputMode="numeric"
      value={formatCurrency(price)}
      onChange={(e) => {
        const val = parseCurrency(e.target.value);
        setPrice(Math.max(0, val));
      }}
      step={100000}
      placeholder={isHovered ? "V√≠ d·ª•: 1.000.000" : ""}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      className="w-full border rounded-lg px-3 py-2 pr-14 focus:ring-2 focus:ring-purple-400 placeholder-gray-400"
    />
    <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 text-sm">
      VNƒê
    </span>
  </div>
</div>



        {/* T·ª∑ l·ªá vay */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            T·ª∑ l·ªá vay
          </label>
          <div className="relative">
            <input
              type="number"
              value={percent}
              min={0}
              step={1}
              onChange={(e) => setPercent(Math.max(0, Number(e.target.value)))}
              className="w-full border rounded-lg px-3 py-2 pr-10 focus:ring-2 focus:ring-purple-400"
              placeholder="V√≠ d·ª•: 30"
            />
            <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 text-sm">
              %
            </span>
          </div>
        </div>

        {/* Th·ªùi gian vay */}
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-1">
            Th·ªùi gian vay
          </label>
          <div className="relative">
            <input
              type="number"
              value={years}
              min={0}
              step={1}
              onChange={(e) => setYears(Math.max(0, Number(e.target.value)))}
              className="w-full border rounded-lg px-3 py-2 pr-12 focus:ring-2 focus:ring-purple-400"
              placeholder="V√≠ d·ª•: 10"
            />
            <span className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 text-sm">
              nƒÉm
            </span>
          </div>
        </div>

        {/* N√∫t t√≠nh to√°n */}
        <button
          onClick={calculate}
          className="w-full bg-purple-600 text-white rounded-lg py-3 font-semibold hover:bg-purple-700 transition"
        >
          T√≠nh ngay
        </button>

        {/* K·∫øt qu·∫£ */}
        {monthly && (
          <p className="mt-3 text-green-700 font-semibold text-lg">
            üí∞ Tr·∫£ g√≥p h√†ng th√°ng: {monthly.toLocaleString("vi-VN")} VNƒê
          </p>
        )}
      </div>

      <div className="mt-5 text-gray-700 text-sm leading-relaxed">
        <ul className="list-disc list-inside space-y-1">
          <li>So s√°nh c√°c ph∆∞∆°ng √°n vay 5 ‚Äì 20 nƒÉm ch·ªâ v·ªõi v√†i c√∫ nh·∫•p chu·ªôt.</li>
          <li>Hi·ªÉn th·ªã t·ªïng l√£i ph·∫£i tr·∫£, t·ªïng g·ªëc + l√£i ƒë·ªÉ d·ª± tr√π chi ph√≠.</li>
          <li>Gi√∫p b·∫°n x√°c ƒë·ªãnh ƒë∆∞·ª£c h·∫°n m·ª©c vay ph√π h·ª£p v·ªõi thu nh·∫≠p th·ª±c t·∫ø.</li>
        </ul>
        <p className="mt-3 italic text-gray-500">
          V√≠ d·ª•: Vay 1 t·ª∑ ƒë·ªìng trong 15 nƒÉm, l√£i su·∫•t 8%/nƒÉm ‚Üí tr·∫£ trung b√¨nh
          9,9 tri·ªáu/th√°ng, t·ªïng chi ph√≠ kho·∫£ng 1,78 t·ª∑.
        </p>
      </div>
    </Card>
  );
};


// üìÖ CARD 3: ƒê·∫∂T L·ªäCH T∆Ø V·∫§N
const BookingForm = () => {
  const [name, setName] = useState("");
  const [date, setDate] = useState("");
  const [time, setTime] = useState("");

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    alert(`ƒê√£ ƒë·∫∑t l·ªãch cho ${name} v√†o ${date} l√∫c ${time}`);
  };

  return (
    <Card
      icon={<Calendar className="w-7 h-7 text-red-600" />}
      title="ƒê·∫∑t l·ªãch t∆∞ v·∫•n ‚Äì Xem nh√† & g·∫∑p chuy√™n vi√™n"
      description="L√™n l·ªãch h·∫πn nhanh ch√≥ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n tr·ª±c ti·∫øp, xem nh√† m·∫´u ho·∫∑c nh·∫≠n h·ªó tr·ª£ t·ª´ chuy√™n vi√™n Homedy."
      imageUrl="work.jpg"
    >
      <form onSubmit={handleSubmit} className="space-y-3">
        <input
          type="text"
          placeholder="T√™n kh√°ch h√†ng"
          value={name}
          onChange={(e) => setName(e.target.value)}
          className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-red-400"
        />
        <input
          type="date"
          value={date}
          onChange={(e) => setDate(e.target.value)}
          className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-red-400"
        />
        <input
          type="time"
          value={time}
          onChange={(e) => setTime(e.target.value)}
          className="w-full border rounded-lg px-3 py-2 focus:ring-2 focus:ring-red-400"
        />
        <button
          type="submit"
          className="w-full bg-red-600 text-white rounded-lg py-3 font-semibold hover:bg-red-700 transition"
        >
          ƒê·∫∑t l·ªãch ngay
        </button>
      </form>

      <div className="mt-5 text-gray-700 text-sm leading-relaxed">
        <ul className="list-disc list-inside space-y-1">
          <li>Ch·ªçn h√¨nh th·ª©c: xem nh√† tr·ª±c ti·∫øp, g·ªçi video ho·∫∑c g·∫∑p t·∫°i vƒÉn ph√≤ng.</li>
          <li>Nh·∫≠n x√°c nh·∫≠n & nh·∫Øc l·ªãch qua email ho·∫∑c tin nh·∫Øn SMS.</li>
          <li>D·ªÖ d√†ng thay ƒë·ªïi ho·∫∑c h·ªßy l·ªãch h·∫πn ch·ªâ trong 1 thao t√°c.</li>
        </ul>
        <p className="mt-3 italic text-gray-500">
          V√≠ d·ª•: B·∫°n ƒë·∫∑t l·ªãch t∆∞ v·∫•n v√†o th·ª© 7 l√∫c 10h s√°ng ‚Äì chuy√™n vi√™n RealEstate s·∫Ω g·ª≠i tr∆∞·ªõc b·∫£n ƒë·ªì v√† th√¥ng tin chi ti·∫øt ƒë·ªÉ h·ªó tr·ª£ b·∫°n t·∫≠n n∆°i.
        </p>
      </div>
    </Card>
  );
};

// üß≠ PH·∫¶N CH√çNH
const Utilities: React.FC = () => {
  const [active, setActive] = useState<"map" | "loan" | "booking">("map");

  const renderContent = () => {
    switch (active) {
      case "map":
        return <MapUtility />;
      case "loan":
        return <LoanCalculator />;
      case "booking":
        return <BookingForm />;
      default:
        return null;
    }
  };

  const btnClass = (key: "map" | "loan" | "booking") =>
    `px-5 py-2 rounded-full font-semibold transition ${
      active === key
        ? "bg-gradient-to-r from-blue-500 to-blue-700 text-white"
        : "bg-gray-100 text-gray-600 hover:bg-gray-200"
    }`;

  return (
    <div className="min-h-screen bg-gray-50 py-12">
      <div className="max-w-4xl mx-auto px-6">
        <h1 className="text-3xl font-bold text-center mb-10 text-gray-800">
          Ti·ªán √≠ch h·ªó tr·ª£ ng∆∞·ªùi mua b·∫•t ƒë·ªông s·∫£n
        </h1>

        <div className="flex justify-center gap-4 mb-8 flex-wrap">
          <button className={btnClass("map")} onClick={() => setActive("map")}>
            B·∫£n ƒë·ªì & V·ªã tr√≠
          </button>
          <button className={btnClass("loan")} onClick={() => setActive("loan")}>
            T√≠nh kho·∫£n vay
          </button>
          <button
            className={btnClass("booking")}
            onClick={() => setActive("booking")}
          >
            ƒê·∫∑t l·ªãch t∆∞ v·∫•n
          </button>
        </div>

        <div className="transition-all duration-500">{renderContent()}</div>
      </div>
    </div>
  );
};

export default Utilities;
